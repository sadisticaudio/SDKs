/*
 BinaryDigitalSignature.thriftclass
 
 Copyright (C) 2012 - 2016, PACE Anti-Piracy, Inc., All rights reserved
 
 This thriftclass file defines the digital signature related thrift items (structures, enums, constants, etc,).
 These items are passed between developer code and the PACE digital signature code.  This file is used by PACE
 to generate the thrift code needed to use the PACE digital signature code.  Developers do not have to generate the
 thrift code themselves, because this code have been provided to developers by PACE.  For developers, this file is
 very useful in explaining the thrift items used in thePACE digital signature code.
 */

// Namespace declarations
namespace cpp pace.eden.thrift.pub
namespace java com.paceap.eden.thrift.pub.binarydigitalsignature
namespace csharp pace.eden.thrift.pub.binarydigitalsignature
namespace rb pace.eden.thrift.pub.binarydigitalsignature

// Note that the following namespaces here is specific to our Eden Services API. It is necessary
// in order to have generated python code refer to other generated python code by full module
// paths without requiring path changes to our customers environment variables.
namespace py edenremotepy.pub.BinaryDigitalSignature
namespace php edenremotephp.pub.BinaryDigitalSignature
namespace perl edenremoteperl.pub.BinaryDigitalSignature

// Includes
include "libpacefusion/thrift/public/PaceEdenPublicCommon.thriftclass"
include "libpacefusion/thrift/public/BinaryCryptoCommon.thriftclass"


//-----------------------
/** 
 Binary signature version numbers.
 */
enum SignerInfoVersion
{
	kSignerInfoVersion1 = 1,	/** The current version is 1. */
	kSignerInfoVersion2,		/** This version is reserved for future use. */
}


//-----------------------
/** 
 Binary signature version numbers.
 */
enum BinarySignatureVersion
{
	kBinarySigVersion1 = 1,	/** The current version is 1. */
	kBinarySigVersion2,		/** This version is reserved for future use. */
}


//-----------------------
/** 
 Signing credential version numbers.
 */
enum SigningCredentialsVersion
{
	kScVersion1 = 1,		/** The current version is 1. */
	kScVersion2,			/** This version is reserved for future use. */
}


//-----------------------
/** 
 Identity type strings for signers.
 */
const string kIdentityType_SignerPace				= "pace"
const string kIdentityType_SignerPublisher			= "publisher"
const string kIdentityType_SignerDistributor		= "distributor"


//-----------------------
/** 
 Identity type strings for what was signed.
 */
const string kIdentityType_BinaryProduct			= "product"


//-----------------------
/** 
 Signature data type keys used in the signature map.
 */
const string kSignatureMapKey_EccRValue				= "ecc_r_value"		/** The "R" value of the ECC signature data */
const string kSignatureMapKey_EccSValue				= "ecc_s_value"		/** The "S" value of the ECC signature data */


//-----------------------
/** 
 Signed digest data types. Defines the types of data we're digesting as part
 of the digital signature
 */
const string kSignedDigest_DataReference_Unknown			= "digest_data_ref_mac_unknown"			/** The data digested is not known 
																										to the current implementation. */
const string kSignedDigest_DataReference_SignerInfo			= "digest_data_ref_signer_info"			/** The SignerInfo Thrift structure. */

const string kSignedDigest_DataReference_Mac_CertChain		= "digest_data_ref_mac_cert_chain"		/** Mac certificate chain obtained from the 
																										kSecCodeInfoCertificates property. */

const string kSignedDigest_DataReference_Win_SignatureData	= "digest_data_ref_win_signature_data"	/** Windows Signature data. */

const string kSignedDigest_DataReference_Mac_RawMachO		= "digest_data_ref_mac_raw_macho"		/** Digest of the raw mach-o image for pre-Lion compatibility.
																									 The optional "architecture" string will also be set in the 
																									 digest struct. */

const string kSignedDigest_DataReference_Mac_UniqueInfo		= "digest_data_ref_mac_unique_info"		/** Digest of unique info obtained from the kSecCodeInfoUnique signed info
																									 digest keys. The optional "architecture" string will also be set in the
																									 digest struct.*/

const string kSignedDigest_DataReference_Mac_V2_CdHash		= "digest_data_ref_mac_v2_cd_hash"		/** Digest of CD Hash obtained from the kSecCodeInfoDigestAlgorithms and
																									 kSecCodeInfoCdHashes signed info digest keys. The optional "architecture"
																									 string will also be set in the digest struct.*/

//-----------------------
/** 
 Expected size of random nonce data at the beginning of the SignerInfo structure.
 */
const i32 kSignerInfoMinimumNonceSize			= 128
const i32 kSignerInfoNonceSize					= kSignerInfoMinimumNonceSize


//-----------------------
/**
 ThriftDataIds: These IDs identify a persistent, flattened byte form of a thrift structure, so that the structure can  
				easily be identified before it is unflattened.   Since these values are in persistent structures, they
				can never change.
 */
const i32 kSignerInfoThriftDataId				= 0x666e6973
const i32 kBinarySignatureThriftDataId			= 0x67697364
const i32 kSigningCredentialsThriftDataId		= 0x6e676973


//-----------------------
/** 
PlatformMacId: ID information specific to the Mac platform.
 */
struct PlatformMacId
{
	1:	string bundleIdentifier,	/** The bundle identifier of the signed binary. */
}


//-----------------------
/** 
 PlatformWinId: ID information specific to the Windows platform.
 */
struct PlatformWinId
{
}


//-----------------------
/** 
 PlatformLinuxId: ID information specific to the Linux platform.
 */
struct PlatformLinuxId
{
}


//-----------------------
/** 
 PlatformAppleIos: ID information specific to the iPhone platform.
 */
struct PlatformAppleIos
{
	1:	string bundleIdentifier,	/** The bundle identifier of the signed binary. */
}


//-----------------------
/** 
 PlatformId: Platform identification information associated with the binary.  May include optional platform specific
			 information, like the bundle identifier on Mac or iPhone.
 */
struct PlatformId
{
	1:	string platform,						/** The platform for the signature (i.e. Mac, Windows, Linux, etc.). */
	2:	string systemName,						/** The name of the operating system. */
	3:	string release,							/** The release level of the operating system. */
	4:	string version,							/** The version the operating system. */
	
	20:	optional PlatformMacId macId,			/** If this is a Mac binary, then its platform specific ID will be  
													here.  Use the __isset.macId bool to determine if this optional  
													PlatformMacId is populated. */
	21:	optional PlatformWinId winId,			/** If this is a Windows binary, then its platform specific ID will be  
													here.  Use the __isset.winId bool to determine if this optional  
													PlatformWinId is populated. */
	22:	optional PlatformLinuxId linuxId,		/** If this is a Linux binary, then its platform specific ID will be   
													here.  Use the __isset.linuxId bool to determine if this optional  
													PlatformLinuxId is populated. */
	23:	optional PlatformAppleIos appleIosId,	/** If this is a iPhone binary, then its platform specific ID will be   
													here.  Use the __isset.appleIosId bool to determine if this optional  
													PlatformAppleIos is populated. */
}


//-----------------------
/** 
 SignerInfo: Structure that contains the signature information for a signed binary.  A digest of this structure will
			 be stored with the digests of the platform specific data in the digest list in the SignedInfo.
 */
struct SignerInfo
{
	1:	list<byte> nonce,												/** Some random bytes used to help make a unique 
																			instance that will affect the digest of the data.*/
	2:	SignerInfoVersion version = SignerInfoVersion.kSignerInfoVersion1,				/** Version of the signed info. */
	3:	SignerInfoVersion minimumVersion = SignerInfoVersion.kSignerInfoVersion1,			/** Code that validates this signature must be at 
																			least this version number or above. */
	4:	PaceEdenPublicCommon.Identity signerId,							/** The publisher who signed this binary. */
	5:	PaceEdenPublicCommon.Identity binaryId,							/** The product associated with this binary. */
	6:	PlatformId platformId,											/** Platform identification information. */
	7:	PaceEdenPublicCommon.PaceToolInfo signingToolInfo,				/** Information about the PACE tool performing 
																			the signing operation. */
	8:	string dateSigned,												/** The date signed in ISO 8601 string format. */
	9:	optional PaceEdenPublicCommon.ProtectionInfo protectionInfo,	/** If this binary is protected and not just signed, 
																			then this contains info regarding the protection.   
																			Use the __isset.protectionInfo bool to determine 
																			if this optional ProtectionInfo is populated. */
	10:	BinaryCryptoCommon.CertificateChain certificateChain,			/** The certificate chain used to sign. */
}


//-----------------------
/** 
 BinarySignature: Structure that contains the signature information for a signed binary.
 */
struct BinarySignature
{
	1:	BinarySignatureVersion version = BinarySignatureVersion.kBinarySigVersion1,		/** Version of the binary digital signature object. */
	2:	BinarySignatureVersion minimumVersion = BinarySignatureVersion.kBinarySigVersion1,	/** Code that validates this signature must be at 
																		least this version number or above. */
	3:	SignerInfo signerInfo,										/** Information about the signer. */
	4:	list<BinaryCryptoCommon.SignatureTuple> signatures,			/** The signatures for this binary.  It's a list in
																		order to support forwards compatibility.  Older clients
																		might not know how to verify newer signatures, but 
																		newly signed binaries could contain both old and new 
																		signature tuples. */
}


//-----------------------
/** 
 SoftwareSigningCredentials: Currently PACE only supports using iLok2 with a code signing certificate creating the PACE  
							 signature for signing binaries.  Using iLok2 for signing is more secure, because the private
							 key is only known to the particular iLok2.  This structure would be used if PACE decides to 
							 sign code to support a private key that is stored on the developer computer for code signing.
 */
struct SoftwareSigningCredentials
{
	1:	string accountId,								/** The iLok.com account ID associated with these credentials. */
	2:	PaceEdenPublicCommon.Identity signingEntity,	/** The identity of the signing entity (i.e. an authorized 
															developer, build machine, etc.). */
	3:	PaceEdenPublicCommon.Identity publisher,		/** The publisher associated with the signing entity. */
	4:	string notBeforeDate,							/** Cache of the signing certificate's start date.  Makes it easier 
															for wraptool to determine if the credentials are valid. */
	5:	string notAfterDate,							/** Cache of the signing certificate's end date.  Makes it easier 
															for wraptool to determine if the credentials are valid. */
	6:	BinaryCryptoCommon.CertifiedKey certifiedKey,	/** The private key and associated certificate chain used to sign 
															wrapped binaries. */
}


//-----------------------
/** 
 PlatformCredentialsMac: Platform specific signing credentials for Macintosh binaries.
 */
struct PlatformCredentialsMac
{
	1: string signingId,								/** The signing identity for the key in a keystore.  This will be 
															passed to Apple's "codesign" tool to perform the platform 
															specific signature. */
	2: optional string keychainPath,					/** Optional path to a keychain file where the signing identity 
															is located.  If not specified, then the default keychain 
															search path will be used to find the signing identity.   
															Use the __isset.keychainPath bool to determine if this 
															optional string is populated. */
}


//-----------------------
/** 
 PlatformCredentialsAppleIos: Platform specific signing credentials for Apple iOS binaries.
 */
struct PlatformCredentialsAppleIos
{
	1: string signingId,								/** The signing identity for the key in a keystore. This will be
															passed to Apple's "codesign" tool to perform the platform 
															specific signature. */
	2: optional string keychainPath,					/** Optional path to a keychain file where the signing identity
															is located.  If not specified, then the default keychain 
															search path will be used to find the signing identity.   
															Use the __isset.keychainPath bool to determine if this   
															optional string is populated. */
}


//-----------------------
/** 
 PlatformCredentialsWin: Platform specific signing credentials for Windows binaries.
 */
struct PlatformCredentialsWin
{
	1: string keyfilePath,								/** Path to the PKCS12 file used to perform the signature. */
	2: optional string password,						/** Optional password to the keyfile.  Use the __isset.password 
															bool to determine if this optional string is populated. */
	3: optional string thumbprint,						/** Optional thumbprint of a signing certificate in certificate store.  Use the __isset.thumbprint 
															bool to determine if this optional string is populated. */

}


//-----------------------
/** 
 PlatformCredentialsLinux: Platform specific signing credentials for Linux binaries.
 */
struct PlatformCredentialsLinux
{
	1: string keyfilePath,								/** Path to the PKCS12 file used to perform the signature. */
	2: optional string password,						/** Optional password to the keyfile.  Use the __isset.password 
															bool to determine if this optional string is populated. */
}


//-----------------------
/** 
 PlatformCredentials: Platform specific signing credentials. Passed to the library that's performing the signing
					  so that it can do the platform specific signature first.
 */
struct PlatformCredentials
{
	1:	optional PlatformCredentialsMac mac,			/** Set if this we're signing on a Mac.  Use the 
															__isset.mac bool to determine if this optional  
															PlatformCredentialsMac is populated. */
	2:	optional PlatformCredentialsAppleIos appleIos,	/** Set if this we're signing on an Apple iOS binary. Use the 
															__isset.appleIos bool to determine if this optional  
															PlatformCredentialsAppleIos is populated. */
	3:	optional PlatformCredentialsWin win,			/** Set if this we're signing on Windows.  Use the 
															__isset.win bool to determine if this optional  
															PlatformCredentialsWin is populated. */
	4:	optional PlatformCredentialsLinux linux,		/** Set if this we're signing on Linux.  Use the 
															__isset.linux bool to determine if this optional  
															PlatformCredentialsLinux is populated. */
	
	21:	optional string extraSigningOptions,			/** If set, this is a platform specific set of extra options 
															to parse and pass to the platform signing tool.   
															Use the __isset.extraSigningOptions bool to determine if    
															this optional string is populated. */
}


//-----------------------
/** 
 ProprietaryCredentials: This structure defines credentials needed to perform the PACE proprietary portion of the
						 binary digital signature.
 */
struct ProprietaryCredentials
{
	1:	bool signWithHardware = 1,								/** True if hardware is used to create the PACE signature.  
																	False if a software private key was used to create the  
																	PACE signature.  Currently, PACE only supports the use 
																	of iLok2 (hardware) for digitally signing binaries. */
	2:	optional i64 ilokSerialNumber,							/** If set, then this is the serial number of the iLok2  
																	to use for signing.  If not set, the signing code must  
																	search for an appropriate iLok2 to use.  Use the 
																	__isset.ilokSerialNumber bool to determine if this   
																	optional i64 is populated. */
	3:	optional SoftwareSigningCredentials softCredentials,	/** Software based credentials may be supported in the 
																	future.  Use the __isset.softCredentials bool to 
																	determine if this optional SoftwareSigningCredentials
																	is populated. */
}


//-----------------------
/** 
 SigningCredentials: Signing credentials used to digitally sign binaries.
 */
struct SigningCredentials
{
	1:	SigningCredentialsVersion version = SigningCredentialsVersion.kScVersion1,	/** Version of this struct. */
	2:	PlatformCredentials platform,						/** Platform specific signing credentials. */
	3:	ProprietaryCredentials proprietary,					/** Credentials used for the PACE part of the signature. */
	4:	PaceEdenPublicCommon.PaceToolInfo signingToolInfo,	/** Information about the PACE tool performing the signing 
																operation. */
}


//-----------------------
/** 
 ContentSignatureInfo - The signing information about signed content.
 */
struct ContentSignatureInfo
{
	1:	string signedInfoReferenceGuid,							/** Random GUID that references this signing instance and 
																	adds entropy to the beginning of the signed content. */
	2:	i32 version = 1,										/** Version content signature generation. */
	3:	i32 publisherId,										/** The publisher who signed this content.  This must 
																	match the publisher in the certificate. */
	4:	string publisherName,									/** The publisher name associated with publisherId. */
	5:	string dateSigned,										/** The date signed in ISO 8601 string format. */
	6:	PaceEdenPublicCommon.eHashAlgorithmId hashAlgorithmId,	/** The algorithm used to hash the content. */
	7:	PaceEdenPublicCommon.ePkStandardId pkStandardId,		/** The PKStandard used to sign the content. */
	8:	string certSerialNumber,								/** The signing certificate's serial number. */
	9:	i32 participantId,										/** The publisher is signing on behalf of this participant. 
																	May be the same as publisherId. */
	10:	string participantName,									/** The publisher name associated with participantId. */
	11:	i32 minVerifierVersion = 1,								/** Content signature verifiers have to ay least understand
																	this ContentSignatureInfo version to verify the signature. */
}


//-----------------------
/** 
 ContentSignature - The signature with the flattened form of the ContentSignatureInfo.
 */
struct ContentSignature
{
	1: list<byte> flattenedInfo,								/** The ContentSignatureInfo in the flattened form.  By 
																	including the ContentSignatureInfo data in this 
																	form, all of this data can be easily digested by both 
																	the signer and verifier, regardless of the version
																	of the ContentSignatureInfo. */
	
	2:	BinaryCryptoCommon.NamedBytesMap_T signatureValues,		/** The Content Signature.  Both the flattenedInfo data and
																	the content data are included to generate the signature.
																	This map contains the signature data. For ECDSA, there 
																	will be "R" and "S" values in this map. */
}



