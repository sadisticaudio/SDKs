/*
 BinaryCryptoCommon.thriftclass
	
 Copyright (C) 2012 - 2016, PACE Anti-Piracy, Inc., All rights reserved
 
 This thriftclass file defines common cryptography related thrift items (structures, enums, constants, etc,).
 These items are passed between developer code and the PACE cryptography code.  This file is used by PACE
 to generate the thrift code needed to use the PACE cryptography code.  Developers do not have to generate the
 thrift code themselves, because this code have been provided to developers by PACE.  For developers, this file
 is very useful in explaining the thrift items used in the PACE cryptography code.
 */

// Namespace declarations
namespace cpp pace.eden.thrift.pub
namespace java com.paceap.eden.thrift.pub.binarycryptocommon
namespace csharp pace.eden.thrift.pub.binarycryptocommon
namespace rb pace.eden.thrift.pub.binarycryptocommon

// Note that the following namespaces here is specific to our Eden Services API. It is necessary
// in order to have generated python code refer to other generated python code by full module
// paths without requiring path changes to our customers environment variables.
namespace py edenremotepy.pub.BinaryCryptoCommon
namespace php edenremotephp.pub.BinaryCryptoCommon
namespace perl edenremoteperl.pub.BinaryCryptoCommon

include "libpacefusion/thrift/public/PaceEdenPublicCommon.thriftclass"

//-----------------------
/**
 Symmetric key version number.
 */
enum SymmetricKeyVersion
{
	kSymmetricKeyVersion1 = 1,	/** The current version is 1. */
	kSymmetricKeyVersion2,		/** This version is reserved for future use. */
}


//-----------------------
/**
 Public key version number.
 */
enum PublicKeyVersion
{
	kPubKeyVersion1 = 1,	/** The current version is 1. */
	kPubKeyVersion2,		/** This version is reserved for future use. */
}


//-----------------------
/**
 Private key version number.
 */
enum PrivateKeyVersion
{
	kPrivKeyVersion1 = 1,	/** The current version is 1. */
	kPrivKeyVersion2,		/** This version is reserved for future use. */
}


//-----------------------
/**
 Certificate chain version number.
 */
enum CertificateChainVersion
{
	kCertChainVersion1 = 1,	/** The current version is 1. */
	kCertChainVersion2,		/** This version is reserved for future use. */
}


//-----------------------
/**
 Certified key version number.
 */
enum CertifiedKeyVersion
{
	kCertKeyVersion1 = 1,	/** The current version is 1. */
	kCertKeyVersion2,		/** This version is reserved for future use. */
}


//-----------------------
/**
 Signed digest version numbers.
 */
enum SignedDigestVersion
{
	kSignedDigestVersion1 = 1,	/** The previous version was 1. */
	kSignedDigestVersion2,		/** The current version is 2. */
	kSignedDigestVersion3,		/** This version is reserved for future use. */
}

//-----------------------
/**
 Current version of the signed digest struct.
 */
const i32 kSignedDigestVersionCurrent = SignedDigestVersion.kSignedDigestVersion2


//-----------------------
/**
 Binary signature version numbers.
 */
enum SignedInfoVersion
{
	kSignedInfoVersion1 = 1,	/** The previous version was 1. */
	kSignedInfoVersion2,		/** The current version is 2. */
	kSignedInfoVersion3,		/** This version is reserved for future use. */
}


//-----------------------
/**
 Current version of the signed info.
 */
const i32 kSignedInfoVersionCurrent = SignedInfoVersion.kSignedInfoVersion2


//-----------------------
/**
 Binary signature version numbers.
 */
enum SignatureValuesVersion
{
	kSignatureValuesVersion1 = 1,	/** The previous version was 1. */
	kSignatureValuesVersion2,		/** The current version is 2. */
	kSignatureValuesVersion3,		/** This version is reserved for future use. */
}


//-----------------------
/**
 Current version of the signature values info.
 */
const i32 kSignatureValuesVersionCurrent = SignatureValuesVersion.kSignatureValuesVersion2


//-----------------------
/**
 Constants that define the public key standard names.
 */
const string kPkStandard_Secp160r1			= "secp160r1"
const string kPkStandard_Secp192r1			= "secp192r1"
const string kPkStandard_Secp224r1			= "secp224r1"
const string kPkStandard_Secp256r1			= "secp256r1"


//-----------------------
/**
 Constants that define the signature method.
 */
const string kSignatureMethod_Ecdsa					= "ecdsa"
const string kSignatureMethod_Rsa					= "rsa"


//-----------------------
/**
 Constants that define the digest method.
 */
const string kDigestMethod_Gostr3411				= "gostr3411"
const string kDigestMethod_RipeMd160				= "ripemd160"
const string kDigestMethod_Sha1						= "sha1"
const string kDigestMethod_Sha1Ime					= "sha1ime"
const string kDigestMethod_Sha256					= "sha256"
const string kDigestMethod_Sha384					= "sha384"
const string kDigestMethod_Sha512					= "sha512"
const string kDigestMethod_Tiger					= "tiger"
const string kDigestMethod_Whirlpool				= "whirlpool"
const string kDigestMethod_Md5						= "md5"


//-----------------------
/**
 Constants that define the encryption algorithm.
 */
const string kEncryptionAlgorithm_Aes128			= "aes128"
const string kEncryptionAlgorithm_Aes192			= "aes192"
const string kEncryptionAlgorithm_Aes256			= "aes256"
const string kEncryptionAlgorithm_Twofish128		= "twofish128"


//-----------------------
/**
 Constants that define the encryption mode.
 */
const string kEncryptionMode_Ecb					= "ecb"
const string kEncryptionMode_Cbc					= "cbc"
const string kEncryptionMode_Cfc					= "cfb"


//-----------------------
/**
 Public key data type keys used in the key data map.
 */
const string kPublicKeyMapKey_EccXCoord				= "ecc_x_coord"		/** The "X" coordinate of ECC public key. */
const string kPublicKeyMapKey_EccYCoord				= "ecc_y_coord"		/** The "Y" coordinate of ECC public key. */


//-----------------------
/**
 Private key data type keys used in the key data map.
 */
const string kPrivateKeyMapKey_EccPrivKey			= "ecc_priv"		/** The ECC private key data. */


//-----------------------
/**
 Certificate chain standard names.
 */
const string kCertificateChainStructure_PaceCcjf1	= "pace-ccjf1"		/** The PACE (iLok2) cert chain format. */
const string kCertificateChainStructure_Pkcs12		= "pkcs12"			/** PKCS12 standard cert chain format. */


//-----------------------
/**
 Certificate chain encoding formats.
 */
const string kCertificateChainFormat_Der			= "der"
const string kCertificateChainFormat_Pem			= "pem"


//-----------------------
/**
 Public key data format where the key data is stored in a map of named  byte arrays.
 */
const string kPublicPrivateKey_NamedBytesFormat		= "pace-pknamedbytes"


//-----------------------
/**
 Signed digest cannonical methods.
 */
const string kCanonicalMethod_ThriftBinary			= "canonical_method_thrift_binary"	/** Thrift structure is flattened using 
																						 the TBinaryProtocol, then digested. */
const string kCanonicalMethod_Raw					= "canonical_method_raw"			/** Raw digest of a single array of bytes. */
const string kCanonicalMethod_SortedArrays			= "canonical_method_sorted_arrays"	/** An array of datablocks are sorted first
																						 by size, then memcmp. */

//-----------------------
/**
 Binary executable architectures.
 */
const string kBinaryArchitecture_i386				= "i386"							/** 32 bit Intel architecture. */ 
const string kBinaryArchitecture_x86_64				= "x86_64"							/** 64 bit Intel architecture. */ 


//-----------------------
/**
 ThriftDataIds: These IDs identify a persistent, flattened byte form of a thrift structure, so that the structure can  
				easily be identified before it is unflattened.   Since these values are in persistent structures, they
				can never change.
 */
const i32 kPublicKeyThriftDataId =		0x6b627570	/** ID for a persistent, flattened public key. */
const i32 kPrivateKeyThriftDataId =		0x6b767270	/** ID for a persistent, flattened private key. */
const i32 kCertifiedKeyThriftDataId =	0x6b747263	/** ID for a persistent, flattened certified key. */


//-----------------------
/**
 NamedBytesMap_T: Typedef of a map that contains named bytes. We used this to support named key data, like the X 
				  and Y coordinates for an ECC public key data or R and S values for an ECDSA signature.
 */
typedef	map< string, list<byte> > NamedBytesMap_T


//-----------------------
/**
 SymmetricKey: Structure that represents a symmetric key.
 */
struct SymmetricKey
{
	1:	SymmetricKeyVersion version = SymmetricKeyVersion.kSymmetricKeyVersion1,	/** Version of the symmetric key. */

	/** Encryption algorithm used for the blob array data (AES-128 by default). */
	11:	PaceEdenPublicCommon.eEncryptionAlgorithmId keyAlgorithm = PaceEdenPublicCommon.eEncryptionAlgorithmId.kAes128,
	
	/** Default to CFB mode, which allows for encryption other than the block size. */
	12:	PaceEdenPublicCommon.eEncryptionMode encryptionMode = PaceEdenPublicCommon.eEncryptionMode.kCfbMode,
	
	/** If specified, this indicates the padding algorithm to use. Note that it's OK to expressly specify no padding, if desired. */
	13: optional PaceEdenPublicCommon.eEncryptionPadding encryptionPadding,

	21:	optional list<byte> initializationVector,	/** Optional initialization vector for encrypting the blob arrays. 
														Use the __isset.initializationVector bool to determine if this  
														optional list of bytes is populated. */
	22:	list<byte> keyData,							/** The key data used to encrypt the individual blob arrays. */
}


//-----------------------
/**
 ProductSpecificSymmetricKey: A product specific symmetric key that has product identifiers.
 */
struct ProductSpecificSymmetricKey
{
	1: i32		authId,				/** The auth identifier for the product. */
	2: i32		publisherId,		/** The publisher (owner) identifier for the product. */
	3: string	productName,		/** The product name. */
	10: SymmetricKey symmetricKey,	/** The symmetric key associated with the product. */
}


//-----------------------
/**
 ContentSymmetricKeys: Structure that holds the symmetric keys for content decryption.
 */
struct ContentSymmetricKeys
{
	1: optional SymmetricKey	licenseDataCommonKey,	/** This key is common to all products defined in the
															PaceEdenLicenseData and can be generated using an auth
															from any product defined in the PaceEdenLicenseData.  This 
															key has the same value regardless of what auth was used to
															generate the key.  Use the __isset.licenseDataCommonKey bool   
															to determine if this optional SymmetricKey is populated. */
															
	2: optional SymmetricKey	productSpecificKey,		/** This key is specific to a product defined in the 
															PaceEdenLicenseData and is generated from the auth specific 
															to the auth's product defined in the PaceEdenLicenseData.  
															So, an auth for product A will consistently generate one key 
															value, while auth for product B will consistently generate 
															another key value.  Use the __isset.productSpecificKey bool   
															to determine if this optional SymmetricKey is populated. */
															
	3: list<byte>				nonce,					/** This data that is for PACE Internal use only. */

	4: set<i32>					allowedPlayerIds,		/** This is a list of publisherIds.  The player executable of 
															the content must be signed by one of these publisherIds  
															for the decryption of the content to be allowed.  If no  
															publisherIds are populated here, then player validation is 
															off. */

}


//-----------------------
/**
 CertificateChain: Structure that represents the certificate chain, including its standard type, format
				   and certificate chain data.
 */
struct CertificateChain
{
	1:	CertificateChainVersion version = CertificateChainVersion.kCertChainVersion1,			/** Version of the certificate chain. */
	2:	string chainStructure = kCertificateChainStructure_PaceCcjf1,	/** The public key standard name used for the 
																			certificate chain. */
	3:	string format = kCertificateChainFormat_Der,					/** Certificate chain encoding format. */
	4:	list<byte> data,												/** The certificate chain data itself. */
}


//-----------------------
/**
 PublicKey: Structure that represents a public key, including its PK standard name, format
			and public key data.
 */
struct PublicKey
{
	1:	PublicKeyVersion version = PublicKeyVersion.kPubKeyVersion1,	/** Version of the public key. */
	2:	string pkStandardName,								/** The public key standard name used for the public key */
	3:	string format = kPublicPrivateKey_NamedBytesFormat,	/** Format of the public key data. */
	4:	NamedBytesMap_T data,								/** The public key data itself. */
}


//-----------------------
/**
 PrivateKey: Structure that represents a private key, including its PK standard name, key format
			 private key data and optionally its public key data.
 */
struct PrivateKey
{
	1:	PrivateKeyVersion version = PrivateKeyVersion.kPrivKeyVersion1,		/** Version of the private key. */
	2:	string pkStandardName,								/** The public key standard name used for the private and 
																optional public key. */
	3:	string format = kPublicPrivateKey_NamedBytesFormat,	/** Format of the private key data. */
	4:	optional NamedBytesMap_T publicKeyData,				/** The public key data itself.  It's optional because we don't 
																always want to include the public key with the private. 
																Use the __isset.publicKeyData bool to determine if this 
																optional NamedBytesMap_T is populated. */
	5:	NamedBytesMap_T privateKeyData,						/** The private key data itself. */
}


//-----------------------
/**
 CertifiedKey: Thrift structure that contains a certificate chain plus the corresponding private key. 
*/
struct CertifiedKey
{
	1:	CertifiedKeyVersion version = CertifiedKeyVersion.kCertKeyVersion1,			/** Version of the signing credentials. */
	2:	CertificateChain certificateChain,						/** The certificate chain used to sign. */
	3:	PrivateKey privateKey,									/** The private key used to sign. */
}


//-----------------------
/**
 DigestInfo: Structure that defines information about a digest.
 */
struct DigestInfo
{
	1:	string canonicalMethod = kCanonicalMethod_ThriftBinary,	/** Type of canonicalization method used for the digest. 
																	Defaults to Thrift TBinaryProtocol format. */
	2:	string digestMethod = kDigestMethod_Sha256,				/** The digest method used to compute the digest. */
}


//-----------------------
/**
 SignatureInfo: Structure that defines information about a signature, including the digest
				and signature methods.
 */
struct SignatureInfo
{
	1:	string signatureMethod = kSignatureMethod_Ecdsa,		/** The signature method used in conjunction with the 
																	digital signature. */
	2:	string pkStandardName = kPkStandard_Secp256r1,			/** The public key standard name used for the binary 
																	digital signature. */
}


//-----------------------
/**
 Platform specific signature information for the Mac.
 */
struct PlatformSignatureInfoMac
{
	1:	i64 secCodeInfoDigestAlgorithm,		/** The digest algorithm indicated in the signed info. */
}


//-----------------------
/**
 Platform specific signature information for Windows.
 */
struct PlatformSignatureInfoWin
{
}


//-----------------------
/**
 Platform specific signature information for Linux.
 */
struct PlatformSignatureInfoLinux
{
}


//-----------------------
/**
 Platform specific signature information for Apple's iOS.
 */
struct PlatformSignatureInfoIos
{
	1:	i64 secCodeInfoDigestAlgorithm,		/** The digest algorithm indicated in the signed info. */
}


//-----------------------
/**
 PlatformId: Platform specific signature information associated with the binary.  May include optional platform specific
 information, like the SecCodeInfo digest algorithm used for specific signature unique info on Mac or iPhone.
 */
struct PlatformSignatureInfo
{
	1:	optional PlatformSignatureInfoMac mac,		/** If this is a Mac binary, then its platform specific signature info 
														will be here.  Use the __isset.macId bool to determine if this optional
														structure element is populated. */
	2:	optional PlatformSignatureInfoWin win,		/** If this is a Windows binary, then its platform specific signature info
														will be here.  Use the __isset.winId bool to determine if this optional
														structure element is populated. */
	3:	optional PlatformSignatureInfoLinux linux,	/** If this is a Linux binary, then its platform specific signature info
														will be here.  Use the __isset.linuxId bool to determine if this optional
														structure element is populated. */
	4:	optional PlatformSignatureInfoIos ios,		/** If this is a iPhone binary, then its platform specific signature info
														will be here.  Use the __isset.appleIosId bool to determine if this optional
														structure element is populated. */
}




//-----------------------
/**
 SignedDigest: Structure that contains information regarding the data digested, the canonicalization
			   method used, the digest method used, and the digest data itself.  Some number of these
			   structures will be included in a BinarySignature.  There will be a digest for each
			   platform specific data we obtain from OS signature calls.
 */
struct SignedDigest
{
	1:	SignedDigestVersion version = SignedDigestVersion.kSignedDigestVersion1,			/** Version of signed digest. */
	2:	SignedDigestVersion minimumVersion = SignedDigestVersion.kSignedDigestVersion1,		/** Code that validates this digest must be at 
																			least this version number or above. */
	
	11: optional string minOsRelease,									/** Optional minimum OS release version required 
																			to understand this digest. If set, OS releases 
																			less than this cannot process this digest. 
																			Use the __isset.minOsRelease bool to determine  
																			if this optional string is populated. */
	12: optional string maxOsRelease,									/** Optional maximum OS release version that should 
																			use this digest. If set, OS releases greater than 
																			this should treat this digest as deprecated and
																			ignore it.  Use the __isset.maxOsRelease bool to  
																			determine if this optional string is
																			populated. */
	
	21:	string dataReference,											/** PACE reference that indentifies the data that
																			was digested. Could be a thrift structure, or 
																			data from a platform specific API. */
	22: optional string osDataId,										/** Optional OS-specific identifier for the digested
																			data.  Use the __isset.osDataId bool to  
																			determine if this optional string is
																			populated. */
	23: optional string architecture,									/** Optional identifier for the architecture (i386,
																			x86_64, etc.) associated with the digest.
																			Used on operating systems that support universal,
																			multi-architecture binaries (like Mac OS X) to 
																			determine which digests should be verified for
																			the binary, allowing for "lipo" like thinning
																			operations. */
	24: optional PlatformSignatureInfo v2_platformSignatureInfo,		/**	Signature information specific to the platform.
																			This is an Eden signature v2 element only. It
																			will not be present in earlier signatures.
																			Use the __isset.osDataId bool to determine if 
																			this optional struct element is populated. */

	31:	DigestInfo digestInfo,											/** Type of data, canonicalization method, and 
																			digest algorithm for the computed digest. */
	32:	list<byte> digestData,											/** The computed digest itself. */
}


//-----------------------
/**
 SignedInfo:  Structure that contains the signature information for signed data.  This
			  data is included in the signature itself, digested before the binary's 
			  platform specific binary data.
 */
struct SignedInfo
{
	1:	SignedInfoVersion version = SignedInfoVersion.kSignedInfoVersion1,		/** Version of the signed Data. */
	2:	SignedInfoVersion minimumVersion = SignedInfoVersion.kSignedInfoVersion1,	/** Code that validates this signature must be at
																	least this version number or above. */
	3:	string signedInfoReferenceGuid,							/** Random GUID that identifies this signed info.  The same
																	reference must be in the corresponding SignatureValues 
																	structure. */
	4:	DigestInfo digestInfo,									/** Type of data, canonicalization method, and digest 
																	algorithm for the computed digest. */
	5:	SignatureInfo signatureInfo,							/** Defines the signature method and standard used to 
																	sign the data. */
	6:	SignedDigest signerInfoDigest,							/** Digest of the signed info. */
	7:	list<SignedDigest> platformDigests,						/** Digests of the platform specific values that tie the
																	PACE signature to the platform signature. */
}


//-----------------------
/**
 SignatureValues: Structure that contains the signature data itself.
 */
struct SignatureValues
{
	1:	SignatureValuesVersion version = SignatureValuesVersion.kSignatureValuesVersion1,			/** Version of the signature. */
	2:	SignatureValuesVersion minimumVersion = SignatureValuesVersion.kSignatureValuesVersion1,	/** Code that validates this signature must be 
																				at least this version number or above. */
	3:	string signedInfoReferenceGuid,										/** Random GUID that references the signed info 
																				associated with these signature values. The 
																				same reference must be in the corresponding 
																				SignedInfo structure. */
	4:	NamedBytesMap_T values,												/** This map contains the signature data. For 
																				ECDSA, there will be "R" and "S" values in 
																				this map. */
}


//-----------------------
/**
 SignatureTuple: Structure that groups signed info and signature values together.
 */
struct SignatureTuple
{
	1:	SignedInfo signedInfo,											/** The signed info.*/
	2:	SignatureValues signatureValues,								/** The corresponding signature values for the 
																			signed info. */
}
